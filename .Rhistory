for (src in sources){
source(src)
}
control <- epcclass.baselearner.control(baselearners=c("rf"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
plot(ensemble)
logodd<- function(u){log(y / (1 - y))}
logodd(0.99)
logodd<- function(u){log(u / (1 - u))}
logodd(0.99)
logodd(0.999999)
logodd(0.99999999999999999999999)
logodd(0.99999999999999)
logodd(1-0.99999999999999)
logodd(0.5)
for (src in sources){
source(src)
}
control <- epcclass.baselearner.control(baselearners=c("rf"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
plot(ensemble)
pred <- round(predict(ensemble,newdata=data.predict))
table(pred, data.predict$diabetes)
ensemble$y
pred <- round(predict(ensemble,newdata=data.predict))
table(pred, data.predict$diabetes)
pred
for (src in sources){
source(src)
}
control <- epcclass.baselearner.control(baselearners=c("rf"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
plot(ensemble)
for (src in sources){
source(src)
}
control <- epcclass.baselearner.control(baselearners=c("rf"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
plot(ensemble)
test.mat <- matrix(rbinom(100,10,.20), byrow = T, ncol=2)
log(mat / (1 - mat))
log(test.mat / (1 - test.mat))
test.mat <- matrix(rbeta(100,10,.20), byrow = T, ncol=2)
test.mat
test.mat <- matrix(rbeta(100,10,5), byrow = T, ncol=2)
test.mat
log(test.mat / (1 - test.mat))
log(test.mat / (1 - test.mat))
apply(test.mat, 1:2, FUN=function(x{log(x / (1 - x))}))
apply(test.mat, 1:2, FUN=function(x) {log(x / (1 - x))}))
apply(test.mat, 1:2, FUN=function(x) {log(x / (1 - x))})
log(test.mat / (1 - test.mat))
log(test.mat / (1 - test.mat))
log(test.mat / (1 - test.mat))
for (src in sources){
source(src)
}
control <- epcclass.baselearner.control(baselearners=c("rf"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
plot(ensemble)
>prcomp
?prcomp
logodd(0.999)
logodd(0.999999999999999999999999999999999999999999999999999)
logodd(0.999999999999999999999999999999999999999999999999)
logodd(0.9999999999999999999999999999999999999)
logodd(0.999999999999999999999999999999)
logodd(0.99999999999999999999)
logodd(0.9999999999)
logodd(0.99999999999)
logodd(0.999999999999)
logodd(0.9999999999999)
logodd(0.99999999999999)
logodd(0.999999999999999)
logodd(0.9999999999999999)
logodd(0.99999999999999999)
logodd(0.9999999999999999)
logodd(1)
for (src in sources){
source(src)
}
control <- epcclass.baselearner.control(baselearners=c("rf"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
plot(ensemble)
for (src in sources){
source(src)
}
control <- epcclass.baselearner.control(baselearners=c("rf"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
plot(ensemble)
for (src in sources){
source(src)
}
control <- epcclass.baselearner.control(baselearners=c("rf"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
plot(ensemble)
for (src in sources){
source(src)
}
control <- epcclass.baselearner.control(baselearners=c("rf"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
plot(ensemble)
for (src in sources){
source(src)
}
control <- epcclass.baselearner.control(baselearners=c("rf"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
plot(ensemble)
sources <-paste("./R/",c("epcclass.R","integrator.R"),sep="")
for (src in sources){
source(src)
}
control <- epcclass.baselearner.control(baselearners=c("rf"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
test.mat
test.mat>=0.99
Which(test.mat>=0.99)
which(test.mat>=0.99)
which(test.mat>=0.5)
which(test.mat>=0.5,, arr.ind = TRUE)
which(test.mat>=0.5,arr.ind = TRUE)
sources <-paste("./R/",c("epcclass.R","integrator.R"),sep="")
for (src in sources){
source(src)
}
control <- epcclass.baselearner.control(baselearners=c("rf"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
which(test.mat>=0.5,arr.ind = TRUE)
replaceIdx <- which(test.mat>=0.5,, arr.ind = TRUE)
test.mat[replaceIdx]
test.mat[!replaceIdx]
test.mat[-replaceIdx]
test.mat[replaceIdx]
test.mat[replaceIdx]>0.5
test.mat[replaceIdx]<0.5
sources <-paste("./R/",c("epcclass.R","integrator.R"),sep="")
for (src in sources){
source(src)
}
control <- epcclass.baselearner.control(baselearners=c("rf"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
log(0.9999999999999999 / (1 - 0.9999999999999999))
log(-0.9999999999999999 / (1 - -0.9999999999999999))
log(-0.9999999999999999 / (1 + 0.9999999999999999))
log(-0.9999999999999999 / (1 + 0.9999999999999999))
sources <-paste("./R/",c("epcclass.R","integrator.R"),sep="")
for (src in sources){
source(src)
}
control <- epcclass.baselearner.control(baselearners=c("rf"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
#devtools::install("EnsemblePCClass")
# chris-change: TESTINGS
sources <-paste("./R/",c("epcclass.R","integrator.R"),sep="")
for (src in sources){
source(src)
}
control <- epcclass.baselearner.control(baselearners=c("rf"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
plot(ensemble)
1/(1+exp(1))
1/(1+exp(0))
exp(0)/(exp(0)+1)
exp(1)/(exp(1)+1)
glm()
?glm()
?glm()
glm(1~1)
glm(1~1)$coeff
glm(1~1+2)$coeff
glm(y~1+a, data=c(y=c(15),a=c(2))$coeff
glm(y~1+a, data=c(y=c(15),a=c(2))$coeff
glm(y~1+a, data=data.frame(y=c(15),a=c(2)))$coeff
glm(y~1+a, data=data.frame(y=c(15),a=c(2)))$coeff
glm(y~1+a, data=data.frame(y=c(0.5),a=c(2)))$coeff
glm(y~1+a, data=data.frame(y=c(0.5,0.01),a=c(2,22)), family=binomial(link="logit"))$coeff
glm(y~1+a, data=data.frame(y=c(1,0),a=c(2,22)), family=binomial(link="logit"))$coeff
as.vector(glm(y~1+a, data=data.frame(y=c(1,0),a=c(2,22)), family=binomial(link="logit"))$coeff)
as.vector(glm(y~1+a, data=data.frame(y=c(1,0),a=c(2,22)), family=binomial(link="logit"))$fitted)
round(as.vector(glm(y~1+a, data=data.frame(y=c(1,0),a=c(2,22)), family=binomial(link="logit"))$fitted))
glm(y~1+a+b, data=data.frame(y=c(1,0),a=c(2,22),b=c(2,22)), family=binomial(link="logit"))$coeff
glm(y~1+a+b, data=data.frame(y=c(1,0),a=c(2,22,23),b=c(2,22,23)), family=binomial(link="logit"))$coeff
glm(y~1+a+b, data=data.frame(y=c(1,0,0),a=c(2,22,23),b=c(2,22,23)), family=binomial(link="logit"))$coeff
glm(y~1+a+b, data=data.frame(y=c(1,0,0,0),a=c(2,22,23,24),b=c(2,22,23,24)), family=binomial(link="logit"))$coeff
glm(y~1+a+b, data=data.frame(y=c(1,0,0,0),a=c(2,22,23,24),b=c(2,22,23,24)), family=binomial(link="logit"))$coeff
glm(y~1+a+b, data=data.frame(y=c(1,0,0,0),a=c(2,22,23,24),b=c(2,22,23,24)), family=binomial(link="logit"))$coeff
glm(y~1+a+b, data=data.frame(y=c(1,0,0,0),a=c(2,22,23,24),b=c(2,22,23,24)), family=binomial(link="logit"))
glm(y~1+a+b, data=data.frame(y=c(1,0,0,0),a=c(2,22,23,24),b=c(2,22,23,24)), family=binomial(link="logit"),singular.ok = F)
try(glm(y~1+a+b, data=data.frame(y=c(1,0,0,0),a=c(2,22,23,24),b=c(2,22,23,24)), family=binomial(link="logit"),singular.ok = F))
class(try(glm(y~1+a+b, data=data.frame(y=c(1,0,0,0),a=c(2,22,23,24),b=c(2,22,23,24)), family=binomial(link="logit"),singular.ok = F)))
#devtools::install("EnsemblePCClass")
# chris-change: TESTINGS
sources <-paste("./R/",c("epcclass.R","integrator.R"),sep="")
for (src in sources){
source(src)
}
control <- epcclass.baselearner.control(baselearners=c("rf"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
plot(ensemble)
#devtools::install("EnsemblePCClass")
# chris-change: TESTINGS
sources <-paste("./R/",c("epcclass.R","integrator.R"),sep="")
for (src in sources){
source(src)
}
control <- epcclass.baselearner.control(baselearners=c("rf"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
#devtools::install("EnsemblePCClass")
# chris-change: TESTINGS
sources <-paste("./R/",c("epcclass.R","integrator.R"),sep="")
for (src in sources){
source(src)
}
control <- epcclass.baselearner.control(baselearners=c("rf"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
plot(ensemble)
#devtools::install("EnsemblePCClass")
# chris-change: TESTINGS
sources <-paste("./R/",c("epcclass.R","integrator.R"),sep="")
for (src in sources){
source(src)
}
control <- epcclass.baselearner.control(baselearners=c("rf"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
plot(ensemble)
#devtools::install("EnsemblePCClass")
# chris-change: TESTINGS
sources <-paste("./R/",c("epcclass.R","integrator.R"),sep="")
for (src in sources){
source(src)
}
control <- epcclass.baselearner.control(baselearners=c("rf"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
#devtools::install("EnsemblePCClass")
# chris-change: TESTINGS
sources <-paste("./R/",c("epcclass.R","integrator.R"),sep="")
for (src in sources){
source(src)
}
control <- epcclass.baselearner.control(baselearners=c("rf"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
plot(ensemble)
LETTERS[1:10]
paste(1:i,sep="+")
i<-15
paste(1:i,sep="+")
paste(1:i,sep="+",col="")
paste(1:i,sep="+",colapse="")
paste(1:i,sep="+",del="")
paste(1:i,sep="+",collapse="")
paste(1:i,del="+",collapse="")
?sep
?paste
paste(1:i,sep ="+",collapse="")
paste0(1:i,sep ="+",collapse="")
paste0(1:i-1,sep ="+",collapse="")
paste("y~",paste0(1:i-1,sep ="+",collapse=""),i)
paste("y~",paste0(1:i-1,sep ="+",collapse=""),i,sep="")
#devtools::install("EnsemblePCClass")
# chris-change: TESTINGS
sources <-paste("./R/",c("epcclass.R","integrator.R"),sep="")
for (src in sources){
source(src)
}
control <- epcclass.baselearner.control(baselearners=c("rf"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
plot(ensemble)
i<15
i<-15
paste("y~",paste0(1:i-1,sep ="+",collapse=""),i,sep="")
paste("y~",paste(1:i-1,sep ="+",collapse=""),i,sep="")
paste("y~",paste0(1:i-1,sep ="+",collapse=""),i,sep="")
paste("y~",paste0(as.character(1:i-1),sep ="+",collapse=""),i,sep="")
paste("y~",paste(as.character(1:i-1),sep ="+",collapse=""),i,sep="")
paste("y~",paste(1:(i-1),sep ="+",collapse=""),i,sep="")
paste(1:(i-1),sep ="+",collapse="")
paste(1:(i-1),collapse="+")
paste(1:i,sep ="+",collapse="")
paste((1:i),sep ="+",collapse="")
paste((1:i),collapse="+")
paste(1:i,collapse="+")
#devtools::install("EnsemblePCClass")
# chris-change: TESTINGS
sources <-paste("./R/",c("epcclass.R","integrator.R"),sep="")
for (src in sources){
source(src)
}
control <- epcclass.baselearner.control(baselearners=c("rf"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
plot(ensemble)
?ExtractVars
sources <-paste("./R/",c("epcclass.R","integrator.R"),sep="")
for (src in sources){
source(src)
}
control <- epcclass.baselearner.control(baselearners=c("rf"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
plot(ensemble)
sources <-paste("./R/",c("epcclass.R","integrator.R"),sep="")
for (src in sources){
source(src)
}
control <- epcclass.baselearner.control(baselearners=c("rf"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
plot(ensemble)
1:ncol(pc.reg.data)
paste(1:15)
paste(1:15,"a")
paste(1:15,"a",sep="")
paste(1:15,"var",sep="")
paste("cp",1:15,sep="")
paste("pc",1:4,collapse="+")
paste("pc",1:4,collapse="+",sep="")
sources <-paste("./R/",c("epcclass.R","integrator.R"),sep="")
for (src in sources){
source(src)
}
control <- epcclass.baselearner.control(baselearners=c("rf"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
sources <-paste("./R/",c("epcclass.R","integrator.R"),sep="")
for (src in sources){
source(src)
}
control <- epcclass.baselearner.control(baselearners=c("rf"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
plot(ensemble)
paste("y ~ ",paste("pc",1:i,collapse="+",sep=""),sep="")
#devtools::install("EnsemblePCClass")
# chris-change: TESTINGS
sources <-paste("./R/",c("epcclass.R","integrator.R"),sep="")
for (src in sources){
source(src)
}
control <- epcclass.baselearner.control(baselearners=c("rf"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
#devtools::install("EnsemblePCClass")
# chris-change: TESTINGS
sources <-paste("./R/",c("epcclass.R","integrator.R"),sep="")
for (src in sources){
source(src)
}
control <- epcclass.baselearner.control(baselearners=c("rf"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
#devtools::install("EnsemblePCClass")
# chris-change: TESTINGS
sources <-paste("./R/",c("epcclass.R","integrator.R"),sep="")
for (src in sources){
source(src)
}
control <- epcclass.baselearner.control(baselearners=c("rf"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
sources <-paste("./R/",c("epcclass.R","integrator.R"),sep="")
for (src in sources){
source(src)
}
control <- epcclass.baselearner.control(baselearners=c("rf"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
plot(ensemble)
sources <-paste("./R/",c("epcclass.R","integrator.R"),sep="")
for (src in sources){
source(src)
}
control <- epcclass.baselearner.control(baselearners=c("rf"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
plot(ensemble)
for (src in sources){
source(src)
}
control <- epcclass.baselearner.control(baselearners=c("rf"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
for (src in sources){
source(src)
}
control <- epcclass.baselearner.control(baselearners=c("rf"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
glm(y~1+a+b, data=data.frame(y=c(1,0,0,0),a=c(2,22,23,24),b=c(2,22,23,24)), family=binomial(link="logit"),singular.ok = F)
glm(y~1+a+b, data=data.frame(y=c(1,0,0,1),a=c(2,22,23,12),b=c(2,22,23,8)), family=binomial(link="logit"),singular.ok = F)
glm(y~a+b, data=data.frame(y=c(1,0,0,1),a=c(2,22,23,12),b=c(2,22,23,8)), family=binomial(link="logit"),singular.ok = F)
glm(y~-1+a+b, data=data.frame(y=c(1,0,0,1),a=c(2,22,23,12),b=c(2,22,23,8)), family=binomial(link="logit"),singular.ok = F)
for (src in sources){
source(src)
}
control <- epcclass.baselearner.control(baselearners=c("rf"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
plot(ensemble)
sources <-paste("./R/",c("epcclass.R","integrator.R"),sep="")
for (src in sources){
source(src)
}
control <- epcclass.baselearner.control(baselearners=c("rf"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
plot(ensemble)
pred <- round(predict(ensemble,newdata=data.predict))
pred
table(pred, data.predict$diabetes)
newpred <- predict(ensemble,newdata=data.predict)
newpred<0
sum(newpred<0)
sum(newpred>1)
control <- epcclass.baselearner.control(baselearners=c("rf","svm","xgboost","nnet"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
plot(ensemble)
rm(list=ls())
####################################
#
# chris-create package
#
####################################
#install.packages("roxygen2")
setwd("C:/Users/chris/OneDrive - Imperial College London/PHD/PHD Ensemble Package/New Package/EnsemblePCClass/")
#devtools::install("../EnsembleBaseClass")
require("EnsembleBaseClass")
####################################
#
# chris-test :
#
####################################
# Required package for benchmarking dataset
require(mlbench)  # install.packages("mlbench")
# require ML BENCH
data(PimaIndiansDiabetes)
# Data preparation
dataset <- PimaIndiansDiabetes
dataset$diabetes <- as.numeric(ifelse(dataset$diabetes=="pos",1,0))
myformula <- diabetes ~ insulin + age + triceps
perc.train <- 0.7
index.train <- sample(1:nrow(dataset), size = round(perc.train*nrow(dataset)))
data.train <- dataset[index.train,]
data.predict <- dataset[-index.train,]
#devtools::install("EnsemblePCClass")
# chris-change: TESTINGS
sources <-paste("./R/",c("epcclass.R","integrator.R"),sep="")
for (src in sources){
source(src)
}
control <- epcclass.baselearner.control(baselearners=c("rf","svm","xgboost","nnet"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
plot(ensemble)
pred <- round(predict(ensemble,newdata=data.predict))
table(pred, data.predict$diabetes)
#devtools::install("EnsemblePCClass")
# chris-change: TESTINGS
sources <-paste("./R/",c("epcclass.R","integrator.R"),sep="")
for (src in sources){
source(src)
}
control <- epcclass.baselearner.control(baselearners=c("rf","svm","xgboost","nnet"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
control <- epcclass.baselearner.control(baselearners=c("xgboost"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
plot(ensemble)
#devtools::install("EnsemblePCClass")
# chris-change: TESTINGS
sources <-paste("./R/",c("epcclass.R","integrator.R"),sep="")
for (src in sources){
source(src)
}
control <- epcclass.baselearner.control(baselearners=c("xgboost"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
glm(y~1+a+b, data=data.frame(y=c(1,0,0,1),a=c(2,22,23,12),b=c(2,22,23,8)), family=binomial(link="logit"),singular.ok = F)
glm(y~1+a+b, data=data.frame(y=c(1,0,0,1),a=c(2,22,23,12),b=c(2,22,23,8)), family=binomial(link="logit"),singular.ok = F)$AIC
glm(y~1+a+b, data=data.frame(y=c(1,0,0,1),a=c(2,22,23,12),b=c(2,22,23,8)), family=binomial(link="logit"),singular.ok = F)$AIC
glm(y~1+a+b, data=data.frame(y=c(1,0,0,1),a=c(2,22,23,12),b=c(2,22,23,8)), family=binomial(link="logit"),singular.ok = F)$AIC
glm(y~1+a+b, data=data.frame(y=c(1,0,0,1),a=c(2,22,23,12),b=c(2,22,23,8)), family=binomial(link="logit"),singular.ok = F)$aix
glm(y~1+a+b, data=data.frame(y=c(1,0,0,1),a=c(2,22,23,12),b=c(2,22,23,8)), family=binomial(link="logit"),singular.ok = F)$aic
predict(ensemble,newdata=data.predict)
pred <- round(predict(ensemble,newdata=data.predict)[,1:20])
predict(ensemble,newdata=data.predict)
plot(ensemble)
control <- epcclass.baselearner.control(baselearners=c("svm","xgboost"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
plot(ensemble)
pred <- round(predict(ensemble,newdata=data.predict)[,1:19])
ncol(predict(ensemble,newdata=data.predict))
dim(predict(ensemble,newdata=data.predict))
predict(ensemble,newdata=data.predict)
mat <- predict(ensemble,newdata=data.predict)
class(mat)
mat
class(mat[1,1])
mat[1,1]
sources <-paste("./R/",c("epcclass.R","integrator.R"),sep="")
for (src in sources){
source(src)
}
control <- epcclass.baselearner.control(baselearners=c("svm","xgboost"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
ensemble$est$integrator
predict(ensemble$est$integrator)
pred <- predict(ensemble$est$integrator)
table(pred, data.train$diabetes)
table(round(pred), data.train$diabetes)
sources <-paste("./R/",c("epcclass.R","integrator.R"),sep="")
for (src in sources){
source(src)
}
control <- epcclass.baselearner.control(baselearners=c("svm","xgboost"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
pred <- predict(ensemble$est$integrator)
plot(ensemble)
mat <- predict(ensemble,newdata=data.predict)
table(pred, data.predict$diabetes)
sources <-paste("./R/",c("epcclass.R","integrator.R"),sep="")
for (src in sources){
source(src)
}
control <- epcclass.baselearner.control(baselearners=c("svm","xgboost"))
ensemble <- epcclass(formula =  myformula, data = data.train, baselearner.control= control)
pred <- predict(ensemble$est$integrator)
plot(ensemble)
mat <- predict(ensemble,newdata=data.predict)
table(pred, data.predict$diabetes)
